<?php
	// common functions for BoE data filter

	$_start = microtime(TRUE);
	$counties = array('albany', 'erie','suffolk','chautauqua', 'columbia', 'delaware', 'dutchess', 'essex', 'greene', 'lewis', 'nassau', 'orange', 'putnam', 'rensselaer', 'rockland', 'saratoga', 'schenectady', 'schoharie', 'sullivan', 'st lawrence', 'ulster', 'wayne', 'westchester','sarasota');
	$boroughs = array('bronx', 'manhattan', 'queens', 'statenisland', 'brooklyn');
	$allcounties = array_merge($counties, $boroughs);
	sort($counties);
	sort($boroughs);
	sort($allcounties);
	
	//counties that do have (reliable) voter history
	$hashistory = array('albany', 'delaware', 'saratoga', 'schenectady', 'putnam','nassau', 'chautauqua','ulster','rockland','orange','greene','dutchess','columbia','rensselaer', 'sullivan', 'wayne', 'westchester');
	$haseyecolor = array('columbia', 'schenectady');
	// connect to database
//	$link = mysqli_connect('localhost', 'boe', 'crst2778', 'boe');
	$link = mysqli_connect('localhost', 'boe2', 'crst2778', 'board_of_elections_2');

	if (mysqli_connect_errno()){
		printf("Connect failed: %s\n", mysqli_connect_error());
		exit();
	}

	// update progress bar
	function updateProgress($percent, $name='') {
		static $last, $init, $start, $elapsed;
		$barlen = 250;
		$interval = 5;
		$name = 'progress'. $name;

		// initialize static variables
		if (!isset($last[$name])) $last[$name] = FALSE;
		if (!isset($init[$name])) $init[$name] = FALSE;
		if (!isset($start[$name])) $start[$name] = microtime(TRUE);
		if (!isset($elapsed[$name])) {
			$elapsed[$name] = 0;
		} elseif (microtime(TRUE) - $elapsed[$name] < $interval && $percent < 1) {
			# return if we haven't waited long enough
			return;
		} else {
			$elapsed[$name] = microtime(TRUE);
		}

		// determine eta for reporting
		if ($percent > 0) {
			$eta = round(microtime(TRUE) - $start[$name]);
			$eta = ($eta / $percent) - $eta;
		} else {
			$eta = 0;
		}

		// what to do?
		switch (TRUE) {
			case !$init[$name]:
				$cmd = <<<CMDEND
<form name="form_{$name}" style="margin: 0px; padding: 0px;">
<table cellspacing="0" cellpadding="0" border="0">
	<tr>
		<td><table cellspacing="1" cellpadding="0" border="0" bgcolor="#808080"><tr><td width="{$barlen}" bgcolor="#E0E0E0"><img src="/progressbar.gif" id="bar_{$name}" width="1" height="12" /></td></tr></table></td>
		<td>&nbsp;<input name="eta" type="text" size="7" value="--:--:--" title="eta - hrs:min:sec" style="font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 9px; line-height: 10px; color: #333; border: 0px; text-align: left;" /></td>
	</tr>
	<tr>
		<td align="right"><input name="pc" type="text" size="5" value="0%" style="font-family: Tahoma, Arial, Helvetica, sans-serif; font-size: 8.5px; line-height: 10px; color: #333; border: 0px; text-align: right;" /></td>
	</tr>
</table>
</form>
CMDEND;
				$init[$name] = TRUE;
				break;

			case $percent == 1:
				$cmd = <<<CMDEND
<script type="text/javascript">
	document.form_{$name}.pc.value = '100%';
	document.form_{$name}.eta.value = '';
	document.getElementById('bar_{$name}').width = {$barlen};
</script>
CMDEND;
				break;

			case $eta != $last[$name]:
				$bar = floor($percent*$barlen);
				$pc = floor($percent*100) .'%';

				switch (TRUE) {
					case $eta > (60*60): # hours
						$eta = sprintf('%02d:%02d:%02d',
							floor($eta/(60*60)),
							floor(($eta%(60*60))/60),
							floor(($eta%(60*60))%60));
						break;
					case $eta > 60: # minutes
						$eta = sprintf('%02d:%02d:%02d',
							0,
							floor($eta/60),
							floor($eta%60));
						break;
					default: # seconds
						$eta = sprintf('%02d:%02d:%02d',
							0,
							0,
							$eta);
						break;
				}

				$cmd = <<<CMDEND
<script type="text/javascript">
	document.form_{$name}.pc.value = '{$pc}';
	document.form_{$name}.eta.value = '{$eta}';
	document.getElementById('bar_{$name}').width = {$bar};
</script>
CMDEND;

				$last[$name] = $eta;
				break;

			default:
				return;
		}

		pp($cmd);
	}

	// output to screen, flush output buffers
	function pp($txt) {
		print $txt;

		flush();
	}


	// show debugging info
	function debug($txt, $br=TRUE) {
		if (DEBUG) {
			print $txt;
			if ($br) print '<br />';
			ob_flush();
			flush();
		}
	}

	function dump($d) {

		if (is_string($d) || is_int($d)) {
			print $d;
		} else {
			print_r($d);
		}

		print '</pre>';
		ob_flush();
		flush();
	}


	// output file
	function dlFile($fs, $format="EXPORT_EXCEL") {
		$exportname = 'boe_export';

		switch ($format) {
			// Excel
			case 'EXPORT_EXCEL':
				$exportname .= '.xls';
                header("Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                header("Content-Disposition: attachment;filename=\"$exportname\"");
                header("Cache-Control: max-age=0");
				break;

			// Tab-Delimited Text
			case 'EXPORT_TXT':
				$exportname .= '.txt';
				header('Content-Type: text/plain');
				header('Content-Disposition: attachment; filename='. $exportname);
				break;

			// CSV
			case 'EXPORT_CSV':
				$exportname .= '.csv';
				header('Content-Type: text/csv');
				header('Content-Disposition: attachment; filename='. $exportname);
				break;
		}
		//		print $fs;
		$fp = fopen($fs, 'r');
		fpassthru($fp);
		fclose($fp);
		exit();
	}


	// decapitalize a string, checking for common abbreviations
	function decap(&$str, $check) {
		switch ($check) {
			case 'NAME':
				$str = ucwords(
					preg_replace('/( |\-)(mc|o\')([a-z])/e', "'\\1\\2'. strToUpper('\\3')",
					preg_replace('/ (ii|iii|iv|vi|vii|viii|ix|md|pfc|sfc)$/e', "' '. strToUpper('\\1')",
					preg_replace('/([a-z]+)-([a-z])([a-z]+)/e', "'\\1-'. strToUpper('\\2') .'\\3'",
					strToLower($str)))));
				break;

			case 'ADDRESS':
				$str = str_replace('%', 'c/o ',
					ucwords(
					preg_replace('/^po /', 'PO ',
					preg_replace('/([a-z,]) ([a-z]{2}) ([0-9])/e', "'\\1 '. strToUpper('\\2') .' \\3'",
					preg_replace('/([a-z]+)-([a-z])([a-z]+)/e', "'\\1-'. strToUpper('\\2') .'\\3'",
					strToLower($str))))));
				break;

			case 'CITY':
				$str = ucwords(
					preg_replace('/([a-z]+)-([a-z])([a-z]+)/e', "'\\1-'. strToUpper('\\2') .'\\3'",
					strToLower($str)));
				break;

			case 'STATE':
			case 'ZIP':
				$str = strToUpper($str);
				break;
		}
	}

	// run a list of addresses through the USPS online ZIP+4 address checker
	function scrubUSPS($data, $delay=0.25) {
		// look for single record
		$single = !isset($data[0]['address']) && isset($data['address']);
		if ($single) $data = array('data' => $data);

		// loop through addresses
		reset($data);
		if (DEBUG) print '<table>';
		foreach ($data as $k=>$d) {
			if (!isset($d['address']) || !isset($d['city']) || !isset($d['state'])) continue;

			set_time_limit(60);
			$curl = new CURL;
			$curl->setCallback('cb_getzip4block');

			// bogus click coordinates so that we don't stand out in USPS.com's logs
			$x = rand(1,70);
			$y = rand(1,17);

			// fix obvious address errors
			preg_replace('/(STATE|COUNTY)\sROUTE\s/', 'ROUTE ', $d['address']);

			// generate request
			$post = sprintf('visited=1&pagenumber=0&firmname=&address2=%s&address1=&city=%s&state=%s&urbanization=&zip5=&submit.x=%s&submit.y=%y&submit=Find+ZIP+Code',
				urlencode(trim($d['address'])),
				urlencode(trim($d['city'])),
				urlencode(trim($d['state'])),
				$x,
				$y);

      // run request and save response to array
      // CURL slowdowns here
			$ver = $curl->post('http://zip4.usps.com/zip4/zcl_0_results.jsp', $post);
			if (is_array($ver)) $data[$k] = array_merge($data[$k], $ver);

      // may be able to remove this check (isset($th)).  Variable is not defined???
			if (!isset($th) && is_array($ver)) {
				$th = array_keys($data[$k]);
				$data[0] = $th;

				if (DEBUG) print '<tr><th>';
				if (DEBUG) print implode('</th><th>', $th);
				if (DEBUG) print '</th></tr>';
			}

			if (isset($th)) {
				if (DEBUG) print '<tr>';
				reset($th);
				foreach ($th as $t) {
					$cell = isset($data[$k][$t]) ? $data[$k][$t] : '&nbsp;';
					if (DEBUG) print "<td>{$cell}</td>";
				}
				if (DEBUG) print '</tr>';
			}
			if (DEBUG) ob_flush();
			if ($delay > 0) usleep($delay*1000000);
		}
		if (DEBUG) print '</table>';

		return $single ? $data['data'] : $data;
	}

	// callback function to extract address block
	function cb_getzip4block($blob) {
		$verified = array(
			'v_address' => '--',
			'v_city' => '--',
			'v_state' => '--',
			'v_zip+4' => '--',
			'v_crrt' => '--',
			'v_county' => '--',
			'v_deliverypoint' => '--',
			'v_checkdigit' => '--',
			'v_lac' => '--',
			'v_elot' => '--',
			'v_elotindicator' => '--',
			'v_recordtype' => '--',
			'v_pmbdesignator' => '--',
			'v_pmbnumber' => '--',
			'v_defaultflag' => '--',
			'v_ewsflag' => '--',
			'v_dpvconfirmation' => '--'
		);

		$start = strpos($blob, '<table width="600" border="0" cellspacing="0" cellpadding="0" summary="This table contains an exact match address and ZIP code.">');
		$end = strpos($blob, '</table>', $start) + 8;
		$table = substr($blob, $start, $end-$start);

		$start = strpos($table, '<td headers="full" height="34" valign="top" class="main" style="background:url(images/table_gray.gif); padding:5px 10px;">');
		$end = strrpos($table, '<br />');
		$address = trim(substr($table, $start, $end-$start));
		preg_match('/[\n\f\s\t]+(.+(?=<))<br \/>[\n\f\s\t]+([^;]+(?=\&nbsp\;))\&nbsp;([A-Z]{2})(\&nbsp;)+([0-9]{5}\-[0-9]{4})/', $address, $matches);

		if (is_array($matches) && count($matches) == 6) {
			$verified['v_address'] = $matches[1];
			$verified['v_city'] = $matches[2];
			$verified['v_state'] = $matches[3];
			$verified['v_zip+4'] = $matches[5];
		}

		$start = strpos($table, '<a title="Mailing Industry Information" href="#" onClick="mailingIndustryPopup2(');
		$end = strrpos($table, ')');
		$extra = trim(substr($table, $start, $end-$start));
		preg_match("/'([A-Z0-9]+)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)',[\n\r\t\s]+'([A-Z0-9]*)'/", $extra, $matches);

		if (is_array($matches) && count($matches) == 14) {
			$verified['v_crrt'] = $matches[1];
			$verified['v_county'] = $matches[2];
			$verified['v_deliverypoint'] = $matches[3];
			$verified['v_checkdigit'] = $matches[4];
			$verified['v_lac'] = $matches[5];
			$verified['v_elot'] = $matches[6];
			$verified['v_elotindicator'] = $matches[7];
			$verified['v_recordtype'] = $matches[8];
			$verified['v_pmbdesignator'] = $matches[9];
			$verified['v_pmbnumber'] = $matches[10];
			$verified['v_defaultflag'] = $matches[11];
			$verified['v_ewsflag'] = $matches[12];
			$verified['v_dpvconfirmation'] = $matches[13];
		}

		return $verified;
	}

	// CURL object class for use in POSTs and GETs to remote webservers
	class CURL {
		var $callback = false;

		function setCallback($func_name) {
			$this->callback = $func_name;
		}

		function doRequest($method, $url, $vars) {
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_HEADER, 1);
			curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']);
			curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($ch, CURLOPT_COOKIEJAR, 'cookie.txt');
			curl_setopt($ch, CURLOPT_COOKIEFILE, 'cookie.txt');
			if ($method == 'POST') {
				curl_setopt($ch, CURLOPT_POST, 1);
				curl_setopt($ch, CURLOPT_POSTFIELDS, $vars);
			}
			$data = curl_exec($ch);
			curl_close($ch);
			if ($data) {
				if ($this->callback)
				{
					$callback = $this->callback;
					$this->callback = false;
					return call_user_func($callback, $data);
				} else {
					return $data;
				}
			} else {
				return curl_error($ch);
			}
		}

		function get($url) {
			return $this->doRequest('GET', $url, 'NULL');
		}

		function post($url, $vars) {
			return $this->doRequest('POST', $url, $vars);
		}
	}


	// write an XML Excel file
	function writeExcelXML($fp, $row, $mode='row', $rows=FALSE, $cols=FALSE) {
		static $headers;
		switch ($mode) {
			default:
			case 'row':
				$out = "\r\n\t<Row>";
				reset($row);
				$k=0;
				foreach($row as $c=>$v) {
					$k++;
					if (empty($v)) continue;
					$type = 'String';
					$style = 's21';

					// look for dates
					if (isset($headers[$c]) && preg_match('/(^date$|^date\s|\sdate$)/i', $headers[$c])) {
						$type = 'DateTime';
						$style = 's22';
					}

					$out .= "\r\n\t\t".'<Cell ss:Index="'. $k .'" ss:StyleID="'. $style .'"><Data ss:Type="'. $type .'">'. htmlentities($v) .'</Data></Cell>';
				}

				$out .= "\r\n\t</Row>";
				break;

			case 'head':
				// hang on to header row for later
				$headers = $row;

				// setup XML output file
				$xml = array();
				$xml['datetime'] = date('Y-m-d\TH:i:s\Z');
				$xml['rowhead'] = '<Cell ss:StyleID="s24"><Data ss:Type="String">'. implode('</Data></Cell>
		<Cell ss:StyleID="s24"><Data ss:Type="String">', $row) .'</Data></Cell>';
				$xml['rowcount'] = $rows;
				$xml['colcount'] = $cols;
				$out = '<?xml version="1.0"?>
		<?mso-application progid="Excel.Sheet"?>
		<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"
		 xmlns:o="urn:schemas-microsoft-com:office:office"
		 xmlns:x="urn:schemas-microsoft-com:office:excel"
		 xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"
		 xmlns:html="http://www.w3.org/TR/REC-html40">';
				$out .= <<<XMLHEADEND
 <DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">
  <LastAuthor>Cornerstone Services, Inc.</LastAuthor>
  <Created>{$xml['datetime']}</Created>
  <Version>11.8132</Version>
 </DocumentProperties>
 <ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">
  <WindowHeight>12660</WindowHeight>
  <WindowWidth>21900</WindowWidth>
  <WindowTopX>480</WindowTopX>
  <WindowTopY>135</WindowTopY>
  <ProtectStructure>False</ProtectStructure>
  <ProtectWindows>False</ProtectWindows>
 </ExcelWorkbook>
 <Styles>
  <Style ss:ID="Default" ss:Name="Normal">
   <Alignment ss:Vertical="Bottom"/>
   <Borders/>
   <Font/>
   <Interior/>
   <NumberFormat/>
   <Protection/>
  </Style>
  <Style ss:ID="s21">
   <NumberFormat ss:Format="@"/>
  </Style>
  <Style ss:ID="s22">
   <NumberFormat ss:Format="[ENG][$-409]mmmm\ d\,\ yyyy;@"/>
  </Style>
  <Style ss:ID="s24">
   <Font x:Family="Swiss" ss:Bold="1"/>
   <Interior ss:Color="#99CCFF" ss:Pattern="Solid"/>
   <NumberFormat ss:Format="@"/>
  </Style>
  <Style ss:ID="s25">
   <Font x:Family="Swiss" ss:Bold="1"/>
   <Interior ss:Color="#99CCFF" ss:Pattern="Solid"/>
  </Style>
 </Styles>
 <Worksheet ss:Name="Data">
  <Table ss:ExpandedColumnCount="{$xml['colcount']}" ss:ExpandedRowCount="{$xml['rowcount']}" x:FullColumns="1"
   x:FullRows="1">
   <Row ss:StyleID="s25">
		{$xml['rowhead']}
   </Row>
XMLHEADEND;
				break;

			case 'foot':
				// finish XML output
				$out = <<<XMLFOOTEND
  </Table>
  <WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">
   <Print>
    <ValidPrinterInfo/>
    <HorizontalResolution>1200</HorizontalResolution>
    <VerticalResolution>1200</VerticalResolution>
   </Print>
   <Selected/>
   <FreezePanes/>
   <FrozenNoSplit/>
   <SplitHorizontal>1</SplitHorizontal>
   <TopRowBottomPane>1</TopRowBottomPane>
   <ActivePane>2</ActivePane>
   <Panes>
    <Pane>
     <Number>3</Number>
    </Pane>
    <Pane>
     <Number>2</Number>
    </Pane>
   </Panes>
   <ProtectObjects>False</ProtectObjects>
   <ProtectScenarios>False</ProtectScenarios>
  </WorksheetOptions>
 </Worksheet>
</Workbook>
XMLFOOTEND;
				break;
		}
		
		fwrite($fp, $out);
	}
?>
